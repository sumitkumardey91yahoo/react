{"version":3,"sources":["logo.svg","components/employee.js","components/student.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Employee","this","props","childCB","react_default","a","createElement","type","onClick","data","bind","React","Component","Student","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","assertThisInitialized","event","childClick","Home","state","message","child","console","log","evt","e","d","i","length","push","student_Student","key","studentClick","class","title","value","done","employee_Employee","childFun","App","className","Home_Home","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,yLCElBC,iLAElBC,KAAKC,MAAMC,QAAQ,sCAGf,OACKC,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAAA,UAAQC,KAAK,SAASC,QAASP,KAAKQ,KAAKC,KAAKT,OAA9C,eACAG,EAAAC,EAAAC,cAAA,yCARuBK,IAAMC,kBCAxBC,cACjB,SAAAA,IAAe,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAd,KAAAY,IACXC,EAAAC,OAAAE,EAAA,EAAAF,CAAAd,KAAAc,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAlB,QACKQ,KAAOK,EAAKL,KAAKC,KAAVK,OAAAK,EAAA,EAAAL,CAAAD,IAFDA,oEAIVO,GACFpB,KAAKC,MAAMoB,WAAYrB,KAAKC,MAAMO,uCAGjC,OACIL,EAAAC,EAAAC,cAAA,WACQF,EAAAC,EAAAC,cAAA,MAAIE,QAAUP,KAAKQ,KAAKC,KAAKT,OAA7B,IAAwCA,KAAKC,MAAMO,cAXlCE,IAAMC,WCGrCW,cACJ,SAAAA,IAAa,IAAAT,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAd,KAAAsB,IACLT,EAAAC,OAAAE,EAAA,EAAAF,CAAAd,KAAAc,OAAAG,EAAA,EAAAH,CAAAQ,GAAAJ,KAAAlB,QACKuB,MAAQ,CACTC,QAAS,GACTC,MAAO,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAJnBZ,sEAQPa,QAAQC,IAAI,UAAW3B,KAAKuB,MAAMC,0CAE3BI,GACPF,QAAQC,IAAI,aAAcC,wCAEfC,GACXH,QAAQC,IAAI,WAAYE,oCAIxB,IADA,IAAIC,EAAI,GACCC,EAAE,EAAGA,EAAI/B,KAAKuB,MAAME,MAAMO,OAAQD,IACzCD,EAAEG,KAAK9B,EAAAC,EAAAC,cAAC6B,EAAD,CAASC,IAAKJ,EAAGvB,KAAMR,KAAKuB,MAAME,MAAMM,GAAIV,WAAYrB,KAAKoC,cAA7D,MAEP,OACGjC,EAAAC,EAAAC,cAAA,OAAKgC,MAAM,iBACVlC,EAAAC,EAAAC,cAAA,mBAAWL,KAAKuB,MAAMC,QAAtB,IAAiCxB,KAAKC,MAAMqC,MAA5C,KACAnC,EAAAC,EAAAC,cAAA,SAAOC,KAAK,OAAOiC,MAAOvC,KAAKuB,MAAMC,UACrCrB,EAAAC,EAAAC,cAAA,SAAOC,KAAK,SAASiC,MAAM,SAAShC,QAAUP,KAAKwC,KAAK/B,KAAKT,QAC7DG,EAAAC,EAAAC,cAACoC,EAAD,CAAUvC,QAASF,KAAK0C,SAASjC,KAAKT,QACtCG,EAAAC,EAAAC,cAAA,WAEGyB,UA9BEpB,IAAMC,WCSVgC,MATf,WACE,OACExC,EAAAC,EAAAC,cAAA,OAAKuC,UAAU,OAAf,UAEIzC,EAAAC,EAAAC,cAACwC,EAAD,CAAMP,MAAM,UCGAQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.da74f541.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nexport  default class Employee extends React.Component {\n  data() {\n    this.props.childCB(700)\n  }\n    render () {\n        return (\n             <div>\n                <button type=\"button\" onClick={this.data.bind(this)}>child click</button>\n                <h1> i am here employee</h1>\n             </div>\n        )\n    }\n}","import React from 'react';\n\nexport default class Student extends React.Component {\n    constructor () {\n        super();\n        this.data = this.data.bind(this);\n    }\n   data (event) {\n       this.props.childClick( this.props.data ) ;\n   }\n    render () {\n        return (\n            <div>\n                    <h1 onClick={ this.data.bind(this) }> { this.props.data }</h1>\n            </div>\n        );\n    }\n}","import React from 'react';\n\nimport Employee from './employee';\n\nimport Student from './student';\nclass Home extends React.Component {\n  constructor(){\n          super();\n          this.state = {\n              message: \"\",\n              child: [1,2,3,4,5,6,7]\n          };\n      }\n      done() {\n        console.log(\"reached\", this.state.message)\n      }\n      childFun(evt) {\n        console.log(\"i am child\", evt)\n      }\n      studentClick(e) {\n        console.log(\"student:\", e)\n      }\n      render() {\n        let d = [];\n        for (var i=0; i < this.state.child.length; i++) {\n          d.push(<Student key={i} data={this.state.child[i]} childClick={this.studentClick}> </Student>);\n        } \n          return (\n             <div class=\"shopping-list\">\n              <h1>Hello {this.state.message} { this.props.title }!</h1>\n              <input type=\"text\" value={this.state.message}/>\n              <input type=\"button\" value=\"submit\" onClick= {this.done.bind(this)}/>\n              <Employee childCB={this.childFun.bind(this)}></Employee>\n              <hr/>\n\n                {d}\n            \n            </div>\n          );\n        }\n\n}\n\n\n\n\nexport { Home };\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Home } from \"./components/Home\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        welcome\n        <Home title=\"100\"></Home>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}